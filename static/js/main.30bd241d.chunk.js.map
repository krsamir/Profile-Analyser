{"version":3,"sources":["Images/Loading.jpeg","Components/InputBox.js","Components/CardModal.js","api/api.js","Components/RepoList.js","App.js","serviceWorker.js","index.js","Components/CardModal.module.css","Components/RepoList.module.css"],"names":["module","exports","InputBox","onInputChange","onButtonSubmit","className","type","placeholder","onChange","onClick","useStyles","makeStyles","theme","modal","display","alignItems","justifyContent","Fade","React","forwardRef","props","ref","open","in","children","onEnter","onExited","other","style","useSpring","from","opacity","to","onStart","onRest","div","SpringModal","api","classes","useState","setOpen","Grid","cx","styles","card","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","id","response","datalist","cryptr","require","base_url","fetchData","username","a","axios","url","method","auth","decrypt","password","data","console","log","status","RepoList","state","apiData","this","input","apiFetched","setState","LoadingImage","src","alt","Repos","map","user","index","key","bigcard","Component","App","event","target","value","length","input_status","isClicked","user_input","button","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.30bd241d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Loading.4a451dbc.jpeg\";","import React from \"react\";\r\nimport \"./InputBox.css\";\r\nexport default function InputBox({onInputChange,onButtonSubmit}) {\r\n  return (\r\n    <div>\r\n      <div className=\"center pa3\">\r\n        <div className=\"form pa4 br3 shadow-5 center\">\r\n          <input className=\"f4 pa2 w-70 center\" type=\"text\" placeholder=\"Enter GitHub ID\" onChange={onInputChange} />\r\n          <button className=\"buttonY w-30 grow f4 link ph3 pv2 dib white bg-dark-red \" onClick={onButtonSubmit}>\r\n            Analyze\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n//onChange={onInputChange}\r\n//onClick={onButtonSubmit}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Grid, Modal } from '@material-ui/core';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport { useSpring, animated } from 'react-spring/web.cjs'; // web.cjs is required for IE 11 support\r\nimport cx from 'classnames';\r\nimport styles from './CardModal.module.css';\r\nconst useStyles = makeStyles((theme) => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    }\r\n}));\r\n\r\nconst Fade = React.forwardRef(function Fade(props, ref) {\r\n    const { in: open, children, onEnter, onExited, ...other } = props;\r\n    const style = useSpring({\r\n        from: { opacity: 0 },\r\n        to: { opacity: open ? 1 : 0 },\r\n        onStart: () => {\r\n            if (open && onEnter) {\r\n                onEnter();\r\n            }\r\n        },\r\n        onRest: () => {\r\n            if (!open && onExited) {\r\n                onExited();\r\n            }\r\n        },\r\n    });\r\n\r\n    return (\r\n        <animated.div ref={ref} style={style} {...other}>\r\n            {children}\r\n        </animated.div>\r\n    );\r\n});\r\n\r\nFade.propTypes = {\r\n    children: PropTypes.element,\r\n    in: PropTypes.bool.isRequired,\r\n    onEnter: PropTypes.func,\r\n    onExited: PropTypes.func,\r\n};\r\n\r\nexport default function SpringModal({ api }) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid onClick={handleOpen} className={cx(styles.card, 'tc  dib br3 pa1 ma2 grow bw2 shadow-5')}>\r\n                <h3>{api['name']}</h3>\r\n            </Grid>\r\n            <Modal\r\n                aria-labelledby=\"spring-modal-title\"\r\n                aria-describedby=\"spring-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={open}>\r\n                    <Grid className={cx(styles.modal, 'tc bg-white dib br3 pa3 ma2 bw2 shadow-5 dark-red')}>\r\n                        <Grid className=\"tl\">\r\n                            <h2 id=\"spring-modal-title\">Description : </h2>\r\n\r\n                            <p id=\"spring-modal-description\">Date and Time of creation : {api['created_at']}</p>\r\n                            <p id=\"spring-modal-description\">Number of forks for this Repositories : {api['forks']}</p>\r\n                            <p id=\"spring-modal-description\">This Repository holds github pages : {api['has_pages']?\"Yes\":\"No\"}</p>\r\n                            <p id=\"spring-modal-description\">last update for this Repository : {api['pushed_at']}</p>\r\n                            <p id=\"spring-modal-description\">Number of watchers for this Repository : {api['watchers_count']}</p>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Fade>\r\n            </Modal>\r\n        </Grid>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\n//Enc and Denc\r\nconst Cryptr = require('cryptr');\r\nconst cryptr = new Cryptr('95@travis@ggk');\r\nlet base_url = \"https://api.github.com\";\r\n//{`https://robohash.org/${id}?200x200`}\r\nlet response, datalist;\r\nexport const fetchData = async (username) => {\r\n  if (username !== \"\") {\r\n    base_url = base_url + \"/users/\" + username + \"/repos\"\r\n    try {\r\n      response = await axios({\r\n        url: base_url,\r\n        method: \"get\",\r\n        auth: {\r\n          username: cryptr.decrypt('f434fd23286f258a62d4d63dfe424ced2de5860771361abb755b8430e9eee381cc3e311f31296436c8139bbe9dbc439ded42bade1bb6649039499cfe4698df3fed6b11f82e0207a7e40e188bab56e44654e32a0419db5959fa0410fb579e8fe92639b798fc7ca0'),\r\n          password: cryptr.decrypt('ae1136da611d6d08c829de5171ff8a06b089c99f530facdaf1df33a0d1cf9c7560fb07d2441db148fadb4c6259a7587ef5edc6758347aca747c798bfef259cc9493af795af9acf29d2af6d4de5d7c347c62c3572688a2e2e0237392e6e6aefde9bc68e7c2e1e63470565c785270acc24743238b0eee3b2c13511760ae6a19b6167a41c37f3058fbf'),\r\n        },\r\n      }, base_url = \"https://api.github.com\");\r\n      datalist = response.data;\r\n      console.log(\"Status Code api 1 : \", response.status)\r\n      return datalist;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  else{\r\n    console.log(\"Please specify a user-name\")\r\n    return [];\r\n  }\r\n\r\n};\r\n\r\n//fetchData();\r\n// const url = \"https://api.github.com/users/GuptaAryan23/repos\";","import React, { Component } from 'react';\r\n// import CardRepo from './CardRepo'\r\nimport {Grid} from '@material-ui/core'\r\nimport CardModal from './CardModal'\r\nimport { fetchData } from \"../api/api\";\r\nimport styles from './RepoList.module.css'\r\nimport LoadingImage from '../Images/Loading.jpeg'\r\nexport default class RepoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            apiData: [],\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        const apiFetched = await fetchData((this.props.input));\r\n        this.setState({ apiData: apiFetched });\r\n    }\r\n    render() {\r\n        const { apiData } = this.state;\r\n        if (!apiData[0])\r\n        return <img className = {styles.LoadingImage}  src={LoadingImage} alt=\"Loading ...\" />;\r\n        \r\n        // console.log(apiData)\r\n        const Repos = apiData.map((user,index) => {\r\n            const api=apiData[index]\r\n            // return <CardRepo key = {index} api={api}/>\r\n            return <CardModal key = {index} api={api}/>\r\n        })\r\n        return (\r\n            <div className={styles.bigcard}>\r\n                {/* <h1>{this.props.input}</h1> */}\r\n            {Repos}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport InputBox from './Components/InputBox'\r\nimport 'tachyons';\r\nimport {Grid} from '@material-ui/core'\r\nimport RepoList from './Components/RepoList'\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      input: '',\r\n      isClicked: false,\r\n      user_input: '',\r\n      input_status:false\r\n    }\r\n  }\r\n  onInputChange = (event) => {\r\n    ((event.target.value.length) > 0) ? this.setState({ input_status:true}):this.setState({ input_status:false}) \r\n    // console.log(event.target.value.length)\r\n    this.setState({ input: event.target.value })\r\n  }\r\n  onButtonSubmit = () => {\r\n    console.log('Button Clicked')\r\n    // console.log(this.state.input)\r\n    this.setState({isClicked:true})\r\n    this.setState({user_input :this.state.input});\r\n    //this.setState({user_input :\"krsamir\"});\r\n  }\r\n  render() {\r\n    const isClicked = this.state.isClicked;\r\n    const input_status = this.state.input_status;\r\n    let button;\r\n    if(isClicked && !input_status){\r\n      button = <Grid>\r\n                  <h3>Invalid Username!</h3>\r\n              </Grid>\r\n    }\r\n    if(isClicked){\r\n      button = <RepoList input={this.state.user_input}/>;\r\n    }\r\n    return (\r\n      <div>\r\n        <div>\r\n          <InputBox onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit} />\r\n          {button}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"CardModal_card__1lSfo\",\"modal\":\"CardModal_modal___tGSn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bigcard\":\"RepoList_bigcard__36bR5\",\"LoadingImage\":\"RepoList_LoadingImage__1B4gi\"};"],"sourceRoot":""}